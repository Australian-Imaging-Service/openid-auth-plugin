/*
 * xnat-openid-auth-plugin: build.gradle
 *
 */

buildscript {
    ext {
        vXnat = "1.7.6-SNAPSHOT"
    }
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://nrgxnat.jfrog.io/nrgxnat/libs-release"
            name "XNAT Release Repository"
        }
        maven {
            url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot"
            name "XNAT Snapshot Repository"
        }
    }
    dependencies {
        classpath "org.nrg.xnat.build:xnat-data-builder:${vXnat}"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.7.RELEASE"
        classpath "io.franzbecker:gradle-lombok:2.1"
        classpath "gradle.plugin.com.palantir.gradle.gitversion:gradle-git-version:0.12.0-rc2"
    }
}

group "au.edu.qcif.xnat.openid"
version "1.0.0-SNAPSHOT"

apply plugin: "com.palantir.git-version"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "io.franzbecker.gradle-lombok"
apply plugin: "io.spring.dependency-management"
apply plugin: "jacoco"
apply plugin: "java"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "xnat-data-builder"

repositories {
    mavenLocal()
    maven { url "https://www.dcm4che.org/maven2/" }
    maven { url "http://maven.imagej.net/content/groups/public" }
    jcenter()
    mavenCentral()
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-release" }
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot" }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

configurations {
    compile.extendsFrom(compileAndInclude)

    all {
        exclude group: "com.sun.media", module: "jai_imageio"
        exclude group: "edu.ucar"
        exclude group: "javax.sql", module: "jdbc-stdext"
        exclude group: "javax.transaction", module: "jta"
    }
}

dependencyManagement.imports {
    mavenBom "org.nrg:parent:${vXnat}"
}

dependencies {
    compileOnly "org.nrg.xnat:web"

    testImplementation "junit:junit"
    testImplementation "org.springframework:spring-test"
}

if (hasProperty("rt.17.jar")) {
    // Solution for bootstrap classpath warning and possible issues with compatibility with 1.7 libraries
    // was taken from this post on discuss.gradle.org: http://bit.ly/24xD9j0
    def rt17jar = property "rt.17.jar"
    logger.info "Using ${rt17jar} as the bootstrap class path jar."
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.fork = true
            options.compilerArgs << "-XDignore.symbol.file"
            options.bootstrapClasspath = files(rt17jar as String)
        }
    }
} else {
    logger.warn "No value was set for the rt.17.jar build property, using the default bootstrap class path. You should consider setting rt.17.jar to indicate a jar file containing the Java 1.7 run-time library:\n"
    logger.warn "  ./gradlew -Prt.17.jar=rt-1.7.0_45.jar war\n"
}

compileJava {
    options.fork = false
}

jar {
    manifest {
        attributes "Application-Name": "XNAT OpenID Authentication Provider",
                "Build-Date": new Date(),
                "Implementation-Sha": gitVersion(),
                "Implementation-Version": version
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

jacoco {
    toolVersion dependencyManagement.importedProperties["jacoco.version"] as String
}

jacocoTestReport {
    reports {
        xml.enabled = false
        csv.enabled = false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

lombok {
    version = dependencyManagement.importedProperties["lombok.version"] as String
    sha256 = dependencyManagement.importedProperties["lombok.checksum"] as String
}

task fatJar(type: Jar) {
    zip64 true
    baseName "${project.name}-all"
    from {
        configurations.compileAndInclude.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA"
    }
    with jar
}

sourceSets {
    main {
        java {
            srcDir "src/main/java"
            srcDir "build/xnat-generated/src/main/java"
        }
        resources {
            srcDir "src/main/resources"
            srcDir "build/xnat-generated/src/main/resources"
        }
    }
}

def sonatypeUsername = hasProperty("SONATYPE_USERNAME") ? sonatypeUsername : System.getProperty("SONATYPE_USERNAME")
def sonatypePassword = hasProperty("SONATYPE_USERNAME") ? sonatypePassword : System.getProperty("SONATYPE_PASSWORD")

uploadArchives {
    repositories {
        mavenDeployer {

            repository(url: "http://dev.redboxresearchdata.com.au/nexus/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            pom.version = "1.0.0-SNAPSHOT"
            pom.artifactId = "openid-auth-plugin"
            pom.groupId = "au.edu.qcif.xnat.openid"
        }
    }
}
